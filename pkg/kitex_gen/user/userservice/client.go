// Code generated by Kitex v0.8.0. DO NOT EDIT.

package userservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	user "my-tiktok/pkg/kitex_gen/user"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Login(ctx context.Context, req *user.LoginRequest, callOptions ...callopt.Option) (r *user.LoginResponse, err error)
	Register(ctx context.Context, req *user.RegisterRequest, callOptions ...callopt.Option) (r *user.RegisterResponse, err error)
	GetUserInfo(ctx context.Context, req *user.GetUserInfoRequest, callOptions ...callopt.Option) (r *user.GetUserInfoResponse, err error)
	CheckUserExitsById(ctx context.Context, req *user.CheckUserExitsByIdRequset, callOptions ...callopt.Option) (r *user.CheckUserExitsByIdResponse, err error)
	RelationAction(ctx context.Context, req *user.RelationActionRequest, callOptions ...callopt.Option) (r *user.RelationActionResponse, err error)
	GetFollowList(ctx context.Context, req *user.RelationFollowListRequest, callOptions ...callopt.Option) (r *user.RelationFollowListResponse, err error)
	GetFollowerList(ctx context.Context, req *user.RelationFollowerListRequest, callOptions ...callopt.Option) (r *user.RelationFollowerListResponse, err error)
	GetFriendList(ctx context.Context, req *user.RelationFriendListRequest, callOptions ...callopt.Option) (r *user.RelationFriendListResponse, err error)
	Chat(ctx context.Context, req *user.MessageChatRequest, callOptions ...callopt.Option) (r *user.MessageChatResponse, err error)
	MessageAction(ctx context.Context, req *user.MessageActionRequest, callOptions ...callopt.Option) (r *user.MessageActionResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserServiceClient struct {
	*kClient
}

func (p *kUserServiceClient) Login(ctx context.Context, req *user.LoginRequest, callOptions ...callopt.Option) (r *user.LoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, req)
}

func (p *kUserServiceClient) Register(ctx context.Context, req *user.RegisterRequest, callOptions ...callopt.Option) (r *user.RegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, req)
}

func (p *kUserServiceClient) GetUserInfo(ctx context.Context, req *user.GetUserInfoRequest, callOptions ...callopt.Option) (r *user.GetUserInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetUserInfo(ctx, req)
}

func (p *kUserServiceClient) CheckUserExitsById(ctx context.Context, req *user.CheckUserExitsByIdRequset, callOptions ...callopt.Option) (r *user.CheckUserExitsByIdResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckUserExitsById(ctx, req)
}

func (p *kUserServiceClient) RelationAction(ctx context.Context, req *user.RelationActionRequest, callOptions ...callopt.Option) (r *user.RelationActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RelationAction(ctx, req)
}

func (p *kUserServiceClient) GetFollowList(ctx context.Context, req *user.RelationFollowListRequest, callOptions ...callopt.Option) (r *user.RelationFollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowList(ctx, req)
}

func (p *kUserServiceClient) GetFollowerList(ctx context.Context, req *user.RelationFollowerListRequest, callOptions ...callopt.Option) (r *user.RelationFollowerListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFollowerList(ctx, req)
}

func (p *kUserServiceClient) GetFriendList(ctx context.Context, req *user.RelationFriendListRequest, callOptions ...callopt.Option) (r *user.RelationFriendListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFriendList(ctx, req)
}

func (p *kUserServiceClient) Chat(ctx context.Context, req *user.MessageChatRequest, callOptions ...callopt.Option) (r *user.MessageChatResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Chat(ctx, req)
}

func (p *kUserServiceClient) MessageAction(ctx context.Context, req *user.MessageActionRequest, callOptions ...callopt.Option) (r *user.MessageActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MessageAction(ctx, req)
}
