// Code generated by Kitex v0.8.0. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	video "my-tiktok/pkg/kitex_gen/video"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetFeed":                       kitex.NewMethodInfo(getFeedHandler, newVideoServiceGetFeedArgs, newVideoServiceGetFeedResult, false),
		"PublishAction":                 kitex.NewMethodInfo(publishActionHandler, newVideoServicePublishActionArgs, newVideoServicePublishActionResult, false),
		"GetPublishList":                kitex.NewMethodInfo(getPublishListHandler, newVideoServiceGetPublishListArgs, newVideoServiceGetPublishListResult, false),
		"FavoriteAction":                kitex.NewMethodInfo(favoriteActionHandler, newVideoServiceFavoriteActionArgs, newVideoServiceFavoriteActionResult, false),
		"GetFavoriteList":               kitex.NewMethodInfo(getFavoriteListHandler, newVideoServiceGetFavoriteListArgs, newVideoServiceGetFavoriteListResult, false),
		"GetFavoriteCountByUserID":      kitex.NewMethodInfo(getFavoriteCountByUserIDHandler, newVideoServiceGetFavoriteCountByUserIDArgs, newVideoServiceGetFavoriteCountByUserIDResult, false),
		"QueryTotalFavoritedByAuthorID": kitex.NewMethodInfo(queryTotalFavoritedByAuthorIDHandler, newVideoServiceQueryTotalFavoritedByAuthorIDArgs, newVideoServiceQueryTotalFavoritedByAuthorIDResult, false),
		"GetWorkCount":                  kitex.NewMethodInfo(getWorkCountHandler, newVideoServiceGetWorkCountArgs, newVideoServiceGetWorkCountResult, false),
		"CommentAction":                 kitex.NewMethodInfo(commentActionHandler, newVideoServiceCommentActionArgs, newVideoServiceCommentActionResult, false),
		"GetCommentList":                kitex.NewMethodInfo(getCommentListHandler, newVideoServiceGetCommentListArgs, newVideoServiceGetCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "video",
		"ServiceFilePath": `../idl/rpc/video.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func getFeedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetFeedArgs)
	realResult := result.(*video.VideoServiceGetFeedResult)
	success, err := handler.(video.VideoService).GetFeed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetFeedArgs() interface{} {
	return video.NewVideoServiceGetFeedArgs()
}

func newVideoServiceGetFeedResult() interface{} {
	return video.NewVideoServiceGetFeedResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishActionArgs)
	realResult := result.(*video.VideoServicePublishActionResult)
	success, err := handler.(video.VideoService).PublishAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishActionArgs() interface{} {
	return video.NewVideoServicePublishActionArgs()
}

func newVideoServicePublishActionResult() interface{} {
	return video.NewVideoServicePublishActionResult()
}

func getPublishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetPublishListArgs)
	realResult := result.(*video.VideoServiceGetPublishListResult)
	success, err := handler.(video.VideoService).GetPublishList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetPublishListArgs() interface{} {
	return video.NewVideoServiceGetPublishListArgs()
}

func newVideoServiceGetPublishListResult() interface{} {
	return video.NewVideoServiceGetPublishListResult()
}

func favoriteActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFavoriteActionArgs)
	realResult := result.(*video.VideoServiceFavoriteActionResult)
	success, err := handler.(video.VideoService).FavoriteAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFavoriteActionArgs() interface{} {
	return video.NewVideoServiceFavoriteActionArgs()
}

func newVideoServiceFavoriteActionResult() interface{} {
	return video.NewVideoServiceFavoriteActionResult()
}

func getFavoriteListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetFavoriteListArgs)
	realResult := result.(*video.VideoServiceGetFavoriteListResult)
	success, err := handler.(video.VideoService).GetFavoriteList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetFavoriteListArgs() interface{} {
	return video.NewVideoServiceGetFavoriteListArgs()
}

func newVideoServiceGetFavoriteListResult() interface{} {
	return video.NewVideoServiceGetFavoriteListResult()
}

func getFavoriteCountByUserIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetFavoriteCountByUserIDArgs)
	realResult := result.(*video.VideoServiceGetFavoriteCountByUserIDResult)
	success, err := handler.(video.VideoService).GetFavoriteCountByUserID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetFavoriteCountByUserIDArgs() interface{} {
	return video.NewVideoServiceGetFavoriteCountByUserIDArgs()
}

func newVideoServiceGetFavoriteCountByUserIDResult() interface{} {
	return video.NewVideoServiceGetFavoriteCountByUserIDResult()
}

func queryTotalFavoritedByAuthorIDHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceQueryTotalFavoritedByAuthorIDArgs)
	realResult := result.(*video.VideoServiceQueryTotalFavoritedByAuthorIDResult)
	success, err := handler.(video.VideoService).QueryTotalFavoritedByAuthorID(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceQueryTotalFavoritedByAuthorIDArgs() interface{} {
	return video.NewVideoServiceQueryTotalFavoritedByAuthorIDArgs()
}

func newVideoServiceQueryTotalFavoritedByAuthorIDResult() interface{} {
	return video.NewVideoServiceQueryTotalFavoritedByAuthorIDResult()
}

func getWorkCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetWorkCountArgs)
	realResult := result.(*video.VideoServiceGetWorkCountResult)
	success, err := handler.(video.VideoService).GetWorkCount(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetWorkCountArgs() interface{} {
	return video.NewVideoServiceGetWorkCountArgs()
}

func newVideoServiceGetWorkCountResult() interface{} {
	return video.NewVideoServiceGetWorkCountResult()
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceCommentActionArgs)
	realResult := result.(*video.VideoServiceCommentActionResult)
	success, err := handler.(video.VideoService).CommentAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceCommentActionArgs() interface{} {
	return video.NewVideoServiceCommentActionArgs()
}

func newVideoServiceCommentActionResult() interface{} {
	return video.NewVideoServiceCommentActionResult()
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceGetCommentListArgs)
	realResult := result.(*video.VideoServiceGetCommentListResult)
	success, err := handler.(video.VideoService).GetCommentList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceGetCommentListArgs() interface{} {
	return video.NewVideoServiceGetCommentListArgs()
}

func newVideoServiceGetCommentListResult() interface{} {
	return video.NewVideoServiceGetCommentListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetFeed(ctx context.Context, req *video.FeedRequest) (r *video.FeedResponse, err error) {
	var _args video.VideoServiceGetFeedArgs
	_args.Req = req
	var _result video.VideoServiceGetFeedResult
	if err = p.c.Call(ctx, "GetFeed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, request *video.PublishActionRequest) (r *video.PublishActionResponse, err error) {
	var _args video.VideoServicePublishActionArgs
	_args.Request = request
	var _result video.VideoServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPublishList(ctx context.Context, request *video.PublishListRequest) (r *video.PublishListResponse, err error) {
	var _args video.VideoServiceGetPublishListArgs
	_args.Request = request
	var _result video.VideoServiceGetPublishListResult
	if err = p.c.Call(ctx, "GetPublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) FavoriteAction(ctx context.Context, req *video.FavoriteActionRequest) (r *video.FavoriteActionResponse, err error) {
	var _args video.VideoServiceFavoriteActionArgs
	_args.Req = req
	var _result video.VideoServiceFavoriteActionResult
	if err = p.c.Call(ctx, "FavoriteAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteList(ctx context.Context, req *video.FavoriteListRequest) (r *video.FavoriteListResponse, err error) {
	var _args video.VideoServiceGetFavoriteListArgs
	_args.Req = req
	var _result video.VideoServiceGetFavoriteListResult
	if err = p.c.Call(ctx, "GetFavoriteList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetFavoriteCountByUserID(ctx context.Context, req *video.GetFavoriteCountByUserIDRequest) (r *video.GetFavoriteCountByUserIDResponse, err error) {
	var _args video.VideoServiceGetFavoriteCountByUserIDArgs
	_args.Req = req
	var _result video.VideoServiceGetFavoriteCountByUserIDResult
	if err = p.c.Call(ctx, "GetFavoriteCountByUserID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) QueryTotalFavoritedByAuthorID(ctx context.Context, req *video.QueryTotalFavoritedByAuthorIDRequest) (r *video.QueryTotalFavoritedByAuthorIDResponse, err error) {
	var _args video.VideoServiceQueryTotalFavoritedByAuthorIDArgs
	_args.Req = req
	var _result video.VideoServiceQueryTotalFavoritedByAuthorIDResult
	if err = p.c.Call(ctx, "QueryTotalFavoritedByAuthorID", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetWorkCount(ctx context.Context, req *video.GetWorkCountRequest) (r *video.GetWorkCountResponse, err error) {
	var _args video.VideoServiceGetWorkCountArgs
	_args.Req = req
	var _result video.VideoServiceGetWorkCountResult
	if err = p.c.Call(ctx, "GetWorkCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, req *video.CommentActionRequest) (r *video.CommentActionResponse, err error) {
	var _args video.VideoServiceCommentActionArgs
	_args.Req = req
	var _result video.VideoServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, req *video.CommentListRequest) (r *video.CommentListResponse, err error) {
	var _args video.VideoServiceGetCommentListArgs
	_args.Req = req
	var _result video.VideoServiceGetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
