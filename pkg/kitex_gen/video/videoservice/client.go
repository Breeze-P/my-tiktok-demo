// Code generated by Kitex v0.8.0. DO NOT EDIT.

package videoservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	video "my-tiktok/pkg/kitex_gen/video"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	GetFeed(ctx context.Context, req *video.FeedRequest, callOptions ...callopt.Option) (r *video.FeedResponse, err error)
	PublishAction(ctx context.Context, request *video.PublishActionRequest, callOptions ...callopt.Option) (r *video.PublishActionResponse, err error)
	GetPublishList(ctx context.Context, request *video.PublishListRequest, callOptions ...callopt.Option) (r *video.PublishListResponse, err error)
	FavoriteAction(ctx context.Context, req *video.FavoriteActionRequest, callOptions ...callopt.Option) (r *video.FavoriteActionResponse, err error)
	GetFavoriteList(ctx context.Context, req *video.FavoriteListRequest, callOptions ...callopt.Option) (r *video.FavoriteListResponse, err error)
	GetFavoriteCountByUserID(ctx context.Context, req *video.GetFavoriteCountByUserIDRequest, callOptions ...callopt.Option) (r *video.GetFavoriteCountByUserIDResponse, err error)
	QueryTotalFavoritedByAuthorID(ctx context.Context, req *video.QueryTotalFavoritedByAuthorIDRequest, callOptions ...callopt.Option) (r *video.QueryTotalFavoritedByAuthorIDResponse, err error)
	GetWorkCount(ctx context.Context, req *video.GetWorkCountRequest, callOptions ...callopt.Option) (r *video.GetWorkCountResponse, err error)
	CommentAction(ctx context.Context, req *video.CommentActionRequest, callOptions ...callopt.Option) (r *video.CommentActionResponse, err error)
	GetCommentList(ctx context.Context, req *video.CommentListRequest, callOptions ...callopt.Option) (r *video.CommentListResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kVideoServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kVideoServiceClient struct {
	*kClient
}

func (p *kVideoServiceClient) GetFeed(ctx context.Context, req *video.FeedRequest, callOptions ...callopt.Option) (r *video.FeedResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFeed(ctx, req)
}

func (p *kVideoServiceClient) PublishAction(ctx context.Context, request *video.PublishActionRequest, callOptions ...callopt.Option) (r *video.PublishActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.PublishAction(ctx, request)
}

func (p *kVideoServiceClient) GetPublishList(ctx context.Context, request *video.PublishListRequest, callOptions ...callopt.Option) (r *video.PublishListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetPublishList(ctx, request)
}

func (p *kVideoServiceClient) FavoriteAction(ctx context.Context, req *video.FavoriteActionRequest, callOptions ...callopt.Option) (r *video.FavoriteActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FavoriteAction(ctx, req)
}

func (p *kVideoServiceClient) GetFavoriteList(ctx context.Context, req *video.FavoriteListRequest, callOptions ...callopt.Option) (r *video.FavoriteListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteList(ctx, req)
}

func (p *kVideoServiceClient) GetFavoriteCountByUserID(ctx context.Context, req *video.GetFavoriteCountByUserIDRequest, callOptions ...callopt.Option) (r *video.GetFavoriteCountByUserIDResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetFavoriteCountByUserID(ctx, req)
}

func (p *kVideoServiceClient) QueryTotalFavoritedByAuthorID(ctx context.Context, req *video.QueryTotalFavoritedByAuthorIDRequest, callOptions ...callopt.Option) (r *video.QueryTotalFavoritedByAuthorIDResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.QueryTotalFavoritedByAuthorID(ctx, req)
}

func (p *kVideoServiceClient) GetWorkCount(ctx context.Context, req *video.GetWorkCountRequest, callOptions ...callopt.Option) (r *video.GetWorkCountResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetWorkCount(ctx, req)
}

func (p *kVideoServiceClient) CommentAction(ctx context.Context, req *video.CommentActionRequest, callOptions ...callopt.Option) (r *video.CommentActionResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CommentAction(ctx, req)
}

func (p *kVideoServiceClient) GetCommentList(ctx context.Context, req *video.CommentListRequest, callOptions ...callopt.Option) (r *video.CommentListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetCommentList(ctx, req)
}
