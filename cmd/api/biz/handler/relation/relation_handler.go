// Code generated by hertz generator.

package relation

import (
	"context"

	relation "my-tiktok/cmd/api/biz/model/social/relation"
	"my-tiktok/cmd/api/rpc"
	"my-tiktok/pkg/errno"
	"my-tiktok/pkg/kitex_gen/user"
	"my-tiktok/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// RelationAction .
// @router /douyin/relation/action/ [POST]
func RelationAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, relation.DouyinRelationActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	current_user_id, exists := c.Get("current_user_id")
	if !exists {
		current_user_id = int64(0)
	}
	// Not allowed to pay attention to oneself
	// if req.ToUserId == current_user_id.(int64) {
	// 	return false, errno.ParamErr
	// }
	resp, err := rpc.UserClient.RelationAction(context.Background(), &user.RelationActionRequest{CurrentUserId: current_user_id.(int64), ToUserId: req.ToUserId, ActionType: req.ActionType})
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, relation.DouyinRelationActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}
	if resp.BaseResp.StatusCode != 0 {
		c.JSON(consts.StatusOK, relation.DouyinRelationActionResponse{
			StatusCode: resp.BaseResp.StatusCode,
			StatusMsg:  resp.BaseResp.StatusMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, relation.DouyinRelationActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
	})
}

// RelationFollowList get list of all users followed by the logged_in user.
//
// @router /douyin/relation/follow/list/ [GET]
func RelationFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFollowListRequest
	err = c.BindAndValidate(&req)

	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, relation.DouyinRelationFollowListResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
			UserList:   nil,
		})
		return
	}

	// FollowInfo, err := service.NewRelationService(ctx, c).GetFollowList(&req)
	current_user_id, exists := c.Get("current_user_id")
	if !exists {
		current_user_id = int64(0)
	}
	resp, err := rpc.UserClient.GetFollowList(context.Background(), &user.RelationFollowListRequest{CurrentUserId: current_user_id.(int64), UserId: req.UserId})
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, relation.DouyinRelationFollowListResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
			UserList:   nil,
		})
		return
	}
	if resp.BaseResp.StatusCode != 0 {
		c.JSON(consts.StatusOK, relation.DouyinRelationFollowListResponse{
			StatusCode: resp.BaseResp.StatusCode,
			StatusMsg:  resp.BaseResp.StatusMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, relation.DouyinRelationFollowListResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		UserList:   utils.ReverseUsers(resp.UserList),
	})
}

// RelationFollowerList get the list of all followers following the logged-in user.
//
// @router /douyin/relation/follower/list/ [GET]
func RelationFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		// c.String(consts.StatusBadRequest, err.Error())
		c.JSON(consts.StatusOK, relation.DouyinRelationFollowerListResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
			UserList:   nil,
		})
		return
	}

	// followerList, err := service.NewRelationService(ctx, c).GetFollowerList(&req)
	current_user_id, exists := c.Get("current_user_id")
	if !exists {
		current_user_id = int64(0)
	}
	resp, err := rpc.UserClient.GetFollowerList(context.Background(), &user.RelationFollowerListRequest{CurrentUserId: current_user_id.(int64), UserId: req.UserId})
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, relation.DouyinRelationFollowerListResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
			UserList:   nil,
		})
		return
	}
	if resp.BaseResp.StatusCode != 0 {
		c.JSON(consts.StatusOK, relation.DouyinRelationFollowerListResponse{
			StatusCode: resp.BaseResp.StatusCode,
			StatusMsg:  resp.BaseResp.StatusMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, relation.DouyinRelationFollowerListResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		UserList:   utils.ReverseUsers(resp.UserList),
	})
}

// RelationFriendList get A list of all friends who follow the logged_in user.
//
// @router /douyin/relation/friend/list/ [GET]
func RelationFriendList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.DouyinRelationFriendListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		// c.String(consts.StatusBadRequest, err.Error())
		c.JSON(consts.StatusOK, relation.DouyinRelationFriendListResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
			UserList:   nil,
		})
		return
	}

	// friendList, err := service.NewRelationService(ctx, c).GetFriendList(&req)
	current_user_id, exists := c.Get("current_user_id")
	if !exists {
		current_user_id = int64(0)
	}
	resp, err := rpc.UserClient.GetFriendList(context.Background(), &user.RelationFriendListRequest{CurrentUserId: current_user_id.(int64), UserId: req.UserId})
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, relation.DouyinRelationFriendListResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
			UserList:   nil,
		})
		return
	}
	if resp.BaseResp.StatusCode != 0 {
		c.JSON(consts.StatusOK, relation.DouyinRelationFriendListResponse{
			StatusCode: resp.BaseResp.StatusCode,
			StatusMsg:  resp.BaseResp.StatusMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, relation.DouyinRelationFriendListResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		UserList:   utils.ReverseFriends(resp.UserList),
	})
}
