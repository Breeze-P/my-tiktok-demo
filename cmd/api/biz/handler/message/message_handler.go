// Code generated by hertz generator.

package message

import (
	"context"

	message "my-tiktok/cmd/api/biz/model/social/message"
	"my-tiktok/cmd/api/rpc"
	"my-tiktok/pkg/errno"
	"my-tiktok/pkg/kitex_gen/user"
	"my-tiktok/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// MessageChat .
// @router /douyin/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.DouyinMessageChatRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, message.DouyinMessageChatResponse{
			StatusCode:  resp.StatusCode,
			StatusMsg:   resp.StatusMsg,
			MessageList: []*message.Message{},
		})
		return
	}

	current_user_id, exist := c.Get("current_user_id")
	if !exist {
		resp := utils.BuildBaseResp(errno.UserIsNotLoginErr)
		c.JSON(consts.StatusOK, message.DouyinMessageChatResponse{
			StatusCode:  resp.StatusCode,
			StatusMsg:   resp.StatusMsg,
			MessageList: []*message.Message{},
		})
		return
	}

	// messages, err := message_service.NewMessageService(ctx, c).GetMessageChat(&req)
	respFromRpc, err := rpc.UserClient.Chat(context.Background(), &user.MessageChatRequest{CurrentUserId: current_user_id.(int64), ToUserId: req.ToUserId})
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, message.DouyinMessageChatResponse{
			StatusCode:  resp.StatusCode,
			StatusMsg:   resp.StatusMsg,
			MessageList: []*message.Message{},
		})
		return
	}
	if respFromRpc.BaseResp.StatusCode != 0 {
		resp := utils.BuildBaseResp(errno.NewErrNo(respFromRpc.BaseResp.StatusCode, respFromRpc.BaseResp.StatusMsg))
		c.JSON(consts.StatusOK, message.DouyinMessageChatResponse{
			StatusCode:  resp.StatusCode,
			StatusMsg:   resp.StatusMsg,
			MessageList: []*message.Message{},
		})
		return
	}

	c.JSON(consts.StatusOK, message.DouyinMessageChatResponse{
		StatusCode:  errno.SuccessCode,
		StatusMsg:   errno.SuccessMsg,
		MessageList: utils.ReverseMessages(respFromRpc.MessageList),
	})
}

// MessageAction Logged-in user to send message
//
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.DouyinMessageActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, message.DouyinMessageActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	current_user_id, exist := c.Get("current_user_id")
	if !exist {
		resp := utils.BuildBaseResp(errno.UserIsNotLoginErr)
		c.JSON(consts.StatusOK, message.DouyinMessageChatResponse{
			StatusCode:  resp.StatusCode,
			StatusMsg:   resp.StatusMsg,
			MessageList: []*message.Message{},
		})
		return
	}

	// err = message_service.NewMessageService(ctx, c).MessageAction(&req)
	respFromRpc, err := rpc.UserClient.MessageAction(context.Background(), &user.MessageActionRequest{CurrentUserId: current_user_id.(int64), ToUserId: req.ToUserId, Content: req.Content})
	if respFromRpc.BaseResp.StatusCode != 0 {
		resp := utils.BuildBaseResp(errno.NewErrNo(respFromRpc.BaseResp.StatusCode, respFromRpc.BaseResp.StatusMsg))
		c.JSON(consts.StatusOK, message.DouyinMessageActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, message.DouyinMessageActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}
	c.JSON(consts.StatusOK, message.DouyinMessageActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
	})
}
