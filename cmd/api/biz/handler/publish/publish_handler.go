// Code generated by hertz generator.

package publish

import (
	"context"
	"path"
	"strconv"
	"time"

	publish "my-tiktok/cmd/api/biz/model/basic/publish"
	"my-tiktok/cmd/api/biz/mw/ffmpeg"
	"my-tiktok/cmd/api/biz/mw/minio"
	"my-tiktok/cmd/user/rpc"
	"my-tiktok/pkg/constants"
	"my-tiktok/pkg/errno"
	"my-tiktok/pkg/kitex_gen/video"
	"my-tiktok/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// PublishAction .
// @router /douyin/publish/action/ [POST]
func PublishAction(ctx context.Context, c *app.RequestContext) {
	var err error

	var req publish.DouyinPublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(errno.ParamErr)
		c.JSON(consts.StatusBadRequest, publish.DouyinPublishActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}
	current_user_id, exist := c.Get("current_user_id")
	if !exist {
		resp := utils.BuildBaseResp(errno.UserIsNotLoginErr)
		c.JSON(consts.StatusOK, publish.DouyinPublishActionResponse{
			StatusMsg:  resp.StatusMsg,
			StatusCode: resp.StatusCode,
		})
		return
	}
	nowTime := time.Now()
	filename := utils.NewFileName(current_user_id.(int64), nowTime.Unix())
	req.Data.Filename = filename + path.Ext(req.Data.Filename)
	uploadInfo, _ := minio.PutToBucket(ctx, constants.MinioVideoBucketName, req.Data)
	hlog.CtxInfof(ctx, "video upload size:"+strconv.FormatInt(uploadInfo.Size, 10))
	PlayURL := constants.MinioImgBucketName + "/" + req.Data.Filename
	buf, _ := ffmpeg.GetSnapshot(utils.URLconvert(ctx, c, PlayURL))
	uploadInfo, _ = minio.PutToBucketByBuf(ctx, constants.MinioImgBucketName, filename+".png", buf)
	hlog.CtxInfof(ctx, "image upload size:"+strconv.FormatInt(uploadInfo.Size, 10))
	// err = service.NewPublishService(ctx, c).PublishAction(&req)
	respFromRpc, err := rpc.VideoClient.PublishAction(context.Background(), &video.PublishActionRequest{CurrentUserId: current_user_id.(int64), Title: c.PostForm("title"), PublishTime: nowTime.Unix(), PlayUrl: PlayURL, CoverUrl: constants.MinioImgBucketName + "/" + filename + ".png"})
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, publish.DouyinPublishActionResponse{
			StatusMsg:  resp.StatusMsg,
			StatusCode: resp.StatusCode,
		})
		return
	}
	if respFromRpc.BaseResp.StatusCode != errno.SuccessCode {
		c.JSON(consts.StatusOK, publish.DouyinPublishActionResponse{
			StatusMsg:  respFromRpc.BaseResp.StatusMsg,
			StatusCode: respFromRpc.BaseResp.StatusCode,
		})
		return
	}
	resp := utils.BuildBaseResp(errno.Success)
	c.JSON(consts.StatusOK, publish.DouyinPublishActionResponse{
		StatusMsg:  resp.StatusMsg,
		StatusCode: resp.StatusCode,
	})
}

// PublishList get the video list of user
// @router /douyin/publish/list/ [GET]
func PublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req publish.DouyinPublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	cuurent_user_id, exist := c.Get("current_user_id")
	if !exist {
		cuurent_user_id = int64(0)
	}
	// resp, err := service.NewPublishService(ctx, c).PublishList(&req)
	respFromRpc, err := rpc.VideoClient.GetPublishList(context.Background(), &video.PublishListRequest{UserId: req.UserId, CurrentUserId: cuurent_user_id.(int64)})
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, publish.DouyinPublishListResponse{
			StatusMsg:  resp.StatusMsg,
			StatusCode: resp.StatusCode,
		})
		return
	}
	if respFromRpc.BaseResp.StatusCode != errno.SuccessCode {
		c.JSON(consts.StatusOK, publish.DouyinPublishListResponse{
			StatusMsg:  respFromRpc.BaseResp.StatusMsg,
			StatusCode: respFromRpc.BaseResp.StatusCode,
		})
		return
	}
	resp := &publish.DouyinPublishListResponse{}
	resp.StatusCode = errno.SuccessCode
	resp.StatusMsg = errno.SuccessMsg
	resp.VideoList = utils.ReverseVideos(respFromRpc.VideoList)
	c.JSON(consts.StatusOK, resp)
}
