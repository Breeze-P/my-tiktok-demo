// Code generated by hertz generator.

package feed

import (
	"context"

	feed "my-tiktok/cmd/api/biz/model/basic/feed"
	"my-tiktok/cmd/api/rpc"
	"my-tiktok/pkg/errno"
	"my-tiktok/pkg/kitex_gen/video"
	"my-tiktok/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req feed.DouyinFeedRequest
	var resp feed.DouyinFeedResponse
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		// c.String(consts.StatusBadRequest, err.Error())
		c.JSON(consts.StatusOK, feed.DouyinFeedResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	current_user_id, exist := c.Get("current_user_id")
	if !exist {
		current_user_id = int64(0)
	}

	// resp, err := feed_service.NewFeedService(ctx, c).Feed(&req)
	respFromRpc, err := rpc.VideoClient.GetFeed(context.Background(), &video.FeedRequest{CurrentUserId: current_user_id.(int64), LatestTime: req.LatestTime})
	if err != nil {
		bresp := utils.BuildBaseResp(err)
		resp.StatusCode = bresp.StatusCode
		resp.StatusMsg = bresp.StatusMsg
		c.JSON(consts.StatusOK, feed.DouyinFeedResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	if respFromRpc.BaseResp.StatusCode != 0 {
		resp.StatusCode = respFromRpc.BaseResp.StatusCode
		resp.StatusMsg = respFromRpc.BaseResp.StatusMsg
		c.JSON(consts.StatusOK, feed.DouyinFeedResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, feed.DouyinFeedResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		VideoList:  utils.ReverseVideosPtr(respFromRpc.VideoList),
	})
}
