// Code generated by hertz generator.

package user

import (
	"context"

	user "my-tiktok/cmd/api/biz/model/basic/user"
	"my-tiktok/cmd/api/biz/mw/jwt"
	"my-tiktok/cmd/api/rpc"
	"my-tiktok/pkg/errno"
	userservice "my-tiktok/pkg/kitex_gen/user"
	"my-tiktok/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// User .
// @router /douyin/user/ [GET]
func User(ctx context.Context, c *app.RequestContext) {
	// 参数绑定错误处理都是一样的
	var err error
	var req user.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, user.DouyinUserResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	// 这里居然合并了！！
	// u, err := service.NewUserService(ctx, c).UserInfo(&req)
	v, exists := c.Get("current_user_id")
	var current_user_id int64
	if !exists {
		current_user_id = 0 // means 游客访问
	}
	current_user_id = v.(int64)
	resp, err := rpc.UserClient.GetUserInfo(context.Background(), &userservice.GetUserInfoRequest{UserId: req.UserId, CurrentUserId: current_user_id})
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, user.DouyinUserResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}
	if resp.BaseResp.StatusCode != 0 {
		c.JSON(consts.StatusOK, user.DouyinUserResponse{
			StatusCode: resp.BaseResp.StatusCode,
			StatusMsg:  resp.BaseResp.StatusMsg,
		})
		return
	}

	// 这里居然直接返回rpc的response
	c.JSON(consts.StatusOK, resp)
}

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, user.DouyinUserRegisterResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	// _, err = service.NewUserService(ctx, c).UserRegister(&req)
	resp, err := rpc.UserClient.Register(context.Background(), &userservice.RegisterRequest{Username: req.Username, Password: req.Password})
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, user.DouyinUserRegisterResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}
	if resp.BaseResp.StatusCode != 0 {
		err = errno.NewErrNo(resp.BaseResp.StatusCode, resp.BaseResp.StatusMsg)
		c.JSON(consts.StatusOK, user.DouyinUserRegisterResponse{
			StatusCode: resp.BaseResp.StatusCode,
			StatusMsg:  resp.BaseResp.StatusMsg,
		})
		return
	}

	jwt.JwtMiddleware.LoginHandler(ctx, c)
	token := c.GetString("token")
	v, _ := c.Get("user_id")
	user_id := v.(int64)

	c.JSON(consts.StatusOK, user.DouyinUserRegisterResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		Token:      token,
		UserId:     user_id,
	})
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	token := c.GetString("token")
	v, _ := c.Get("user_id")
	user_id := v.(int64)

	c.JSON(consts.StatusOK, user.DouyinUserLoginResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
		Token:      token,
		UserId:     user_id,
	})
}
