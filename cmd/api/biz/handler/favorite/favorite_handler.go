// Code generated by hertz generator.

package favorite

import (
	"context"

	favorite "my-tiktok/cmd/api/biz/model/interact/favorite"
	"my-tiktok/cmd/api/rpc"
	"my-tiktok/pkg/errno"
	"my-tiktok/pkg/kitex_gen/video"
	"my-tiktok/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// FavoriteAction .
// @router /douyin/favorite/action/ [POST]
func FavoriteAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)

	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, favorite.DouyinFavoriteActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	current_user_id, exists := c.Get("current_user_id")
	if !exists {
		current_user_id = int64(0)
	}

	// ok, err := favorite_service.NewFavoriteService(ctx, c).FavoriteAction(&req)
	resp, err := rpc.VideoClient.FavoriteAction(context.Background(), &video.FavoriteActionRequest{CurrentUserId: current_user_id.(int64), VideoId: req.VideoId, ActionType: req.ActionType})
	if err != nil {
		resp := utils.BuildBaseResp(err)
		c.JSON(consts.StatusOK, favorite.DouyinFavoriteActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}
	if resp.BaseResp.StatusCode != 0 {
		resp := utils.BuildBaseResp(errno.NewErrNo(resp.BaseResp.StatusCode, resp.BaseResp.StatusMsg))
		c.JSON(consts.StatusOK, favorite.DouyinFavoriteActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	if !resp.Success {
		resp := utils.BuildBaseResp(errno.FavoriteActionErr)
		c.JSON(consts.StatusOK, favorite.DouyinFavoriteActionResponse{
			StatusCode: resp.StatusCode,
			StatusMsg:  resp.StatusMsg,
		})
		return
	}

	c.JSON(consts.StatusOK, favorite.DouyinFavoriteActionResponse{
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
	})
}

// FavoriteList get all liked videos of the logged-in user.
//
// @router /douyin/favorite/list/ [GET]
func FavoriteList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.DouyinFavoriteListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	// favoritelist, err := favorite_service.NewFavoriteService(ctx, c).GetFavoriteList(&req)
	respFromRpc, err := rpc.VideoClient.GetFavoriteList(context.Background(), &video.FavoriteListRequest{UserId: req.UserId})
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	if respFromRpc.BaseResp.StatusCode != 0 {
		c.JSON(consts.StatusOK, favorite.DouyinFavoriteListResponse{
			StatusCode: respFromRpc.BaseResp.StatusCode,
			StatusMsg:  respFromRpc.BaseResp.StatusMsg,
		})
		return
	}
	c.JSON(consts.StatusOK, favorite.DouyinFavoriteListResponse{
		VideoList:  utils.ReverseVideosPtr(respFromRpc.VideoList),
		StatusCode: errno.SuccessCode,
		StatusMsg:  errno.SuccessMsg,
	})
}
